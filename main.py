from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
import logging
import os

API_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

logging.basicConfig(level=logging.INFO)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
keyboard.add(KeyboardButton("POST"), KeyboardButton("PROGNOZ"))
keyboard.add(KeyboardButton("POISK"), KeyboardButton("POMOSH"))

@dp.message_handler(commands=['start'])
async def cmd_start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç '–î–µ—Ç–∏ –°–≤–µ—Ç–∞' ‚òÄÔ∏è", reply_markup=keyboard)

@dp.message_handler(commands=['post'])
async def cmd_post(message: Message):
    await message.answer("‚ú® –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –≤ —Å—Ç–∏–ª–µ –°–æ–ª–Ω—ã—à–∫–∞.")

@dp.message_handler(commands=['prognoz'])
async def cmd_prognoz(message: Message):
    await message.answer("üåû –≠–Ω–µ—Ä–≥–æ–ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å: —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ, –ø—Ä–∏–Ω—è—Ç–∏–µ, –ª—é–±–æ–≤—å.")

@dp.message_handler(commands=['pomosh'])
async def cmd_pomosh(message: Message):
    await message.answer("üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/post ‚Äî —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç
/prognoz ‚Äî –ø–æ–ª—É—á–∏—Ç—å —ç–Ω–µ—Ä–≥–æ–ø—Ä–æ–≥–Ω–æ–∑
/poisk ‚Äî –Ω–∞–π—Ç–∏ –ø–æ –∞—Ä—Ö–∏–≤—É
/pomosh ‚Äî –ø–æ–º–æ—â—å")

@dp.message_handler(commands=['poisk'])
async def cmd_poisk(message: Message):
    await message.answer("üîé –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∞—Ä—Ö–∏–≤—É (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ).")

@dp.message_handler(lambda message: message.text in ["POST", "PROGNOZ", "POISK", "POMOSH"])
async def handle_buttons(message: Message):
    command = message.text.lower()
    await message.answer(f"–í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É /{command}...")
    await bot.send_message(chat_id=message.chat.id, text=f"‚ú® –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–≤–µ—Ç –¥–ª—è /{command} (–≤—Ä–µ–º–µ–Ω–Ω–æ —à–∞–±–ª–æ–Ω–Ω—ã–π).")

if __name__ == '__main__':
    executor.start_polling(dp)
